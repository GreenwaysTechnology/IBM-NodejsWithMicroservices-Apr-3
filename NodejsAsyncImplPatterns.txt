Node.js Programming area

1.Node REPL
2.Node and js apis
3.Node core apis
4.Styles of writing async programming
   ->Callback pattern
   ->Promise Pattern
   ->Promise with Async and await Pattern
...................................................................................

1.Node REPL - Read Evalulate Print loop

Node REPL is used to run js programs interactive mode.

Js programs are executed in two modes

1.interactive mode - REPL mode
2.script mode - by loading script on to the runtime


>node
node
Welcome to Node.js v16.15.0.
Type ".help" for more information.
> a=10
10
> b=20
20
> c =a + b
30
> Math.random()
0.33841885209828515
> "Hello".toUpperCase()
'HELLO'

script mode

>node src/index.js
.................................................................................
			 How to write non blocking apps
...................................................................................

Fundamental Requirement:
........................

1.OS should support non blocking apis like select,poll,epoll
2.Program languages/platforms also should provide high level apis to map os low level apis

In order to write non blocking apps in js(node), we have different patterns(styles)

Nonblocking Applications Developement style:
............................................

1.callbacks
2.Promises
3.Async await
4.reactive programming 



1.callbacks:
  Callback is listener function which gets registered during compile time
  and exexcuted during runtime when ever the event is emitted.

Req for async programming:
 
1.You need high level non blocking api - provided by node.js 
2.listener api which is called "function as parameter/hof" 

HOF functions are becoming listeners/callbacks which are called when ever event is emitted.


NonBlocking apis:
1.timer
   -setTimeout
   -setInterval
2.io
   web
   fs
   socket
 etc...
3.process api
  nextTick
...................................................................................
			How to implement non blocking using timers
...................................................................................
//using timer

function blockMe(message) {
    console.log(message)
}

function delay(callback) {
    //node js high level non blocking api 
    setTimeout(callback, 5000)
}
///////////////////////////////////////////////////////////////////

blockMe('start')
delay(function () {
    console.log('i am delayed')
})
blockMe('end')

.................................

callbacks with arrow:

const blockMe = (message) => console.log(message)

const sayHello = hello => setTimeout(hello, 5000, 'Hello!!')

blockMe('start')
sayHello(message => console.log(message))
blockMe('end')
....................................................................................
complex callbacks with biz logic:
.................................

const login = (userName, password, success, failure) => {
    if (userName === 'admin' && password === 'admin') {
        setTimeout(success, 1000, 'Login Success')
    } else {
        setTimeout(failure, 1000, 'Login Failed')
    }
}
login('admin', 'admin', status => console.log(status), err => console.log(err))
...................................................................................
..................................................................................
			Nested Callbacks
.................................................................................

The output of one callback will be input into another callback -  async composition.

//callback nesting: the output of one callback will be input to another callback

//getUser ---> login ---> showdashboard

//callback nesting - async composition
//resolve = success reject=failure

const getUser = (resolve, reject) => {
    console.log('getUser is called')
    let user = {
        name: 'admin'
    }
    //user=undefined
    let error = {
        message: 'User not Found'
    }
    if (user) {
        setTimeout(resolve, 100, user)
    } else {
        setTimeout(reject, 100, error)
    }
}

const login = (user, resolve, reject) => {
    console.log('login is called')
    if (user.name === 'admin') {
        setTimeout(resolve, 100, 'Login Success')
    } else {
        setTimeout(reject, 100, 'Login Failed')
    }
}
const dashboard = (status, resolve, reject) => {
    if (status === 'Login Success') {
        setTimeout(resolve, 100, 'Admin Page')
    } else {
        setTimeout(reject, 100, 'Guest Page')
    }
}
//calling
getUser(user => {
    //call login
    login(user, status => {
        //call dashboard
        dashboard(status, adminPage => console.log(adminPage), err => console.log(err))
    }, err => console.log(err))
}, err => console.log(err))