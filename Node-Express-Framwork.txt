				Express.js
....................................................................................
What is express.js
  Express.js is the first web framework built for node js and built by node js core team.
  Express.js is wrapper around core http module.
  Express is abstraction for creating Web Applications for node http core module.

Express can be used to small to medium scale apps only.

Types of apps we can build using express.js

1.Dynamic web apps
2.Rest apis

How to write express apps?

1.using vannila node project and install express framework
2.using express generator - tool used to create express apps.

express core concepts:
 In express everything object

express - function
  used to create express objects

1.Application 
2.Request
3.Response
4.Router

1.Application Object
  =>It represents the whole express app
  =>It is container object which contains other objects
  =>It is created by calling express function
  =>Per Application only one app instance

Application Object
  =>You can expose the global end points
  =>You configure middlewares
  =>you can render views
  =>you can register template engines
  =>You can start web container...

Steps:

mkdir express-app
cd express-app
npm init
npm install express

index.js
const express = require('express')

//create application object 
const app = express()


//home page
app.get('/',(req,res)=>{
    res.end('Home')
})

//Request handling: HTTP method GET  With URL 
app.get('/api/users', (req, res) => {
    res.end('users')
})

//start server 
app.listen(3000, () => {
    console.log('Express app is running!')
})
....................................................................................
				Send Json

const express = require('express')
const usersService = require('./services/users.service')

//create application object 
const app = express()


//home page
app.get('/', (req, res) => {
    res.end('Home')
})

//Request handling: HTTP method GET  With URL 
app.get('/api/users', async (req, res) => {
    try {
        const users = await usersService.findAll()
        res.status(200).json(users)
    }
    catch (err) {
        res.status(400).json(err)
    }
})

//start server 
app.listen(3000, () => {
    console.log('Express app is running!')
})
...................................................................................
				Resources

users
todos
comments
customers
const TODOS = [
    {
        userId: 1,
        id: 1,
        title: "delectus aut autem",
        completed: false
    },
    {
        userId: 1,
        id: 2,
        title: "quis ut nam facilis et officia qui",
        completed: false
    },
    {
        userId: 1,
        id: 3,
        title: "fugiat veniam minus",
        completed: false
    }]
class TodoService {
    constructor() { }

    //findAll 
    findAll() {
        return new Promise((resolve, reject) => {
            setTimeout(resolve, 1000, TODOS)
        })
    }
}
module.exports = new TodoService()

const express = require('express')
const usersService = require('./services/users.service')
const todoService = require('./services/todo.service')

//create application object 
const app = express()


//home page
app.get('/', (req, res) => {
    res.end('Home')
})

//Request handling: HTTP method GET  With URL 
app.get('/api/users', async (req, res) => {
    try {
        const users = await usersService.findAll()
        res.status(200).json(users)
    }
    catch (err) {
        res.status(400).json(err)
    }
})
app.get('/api/todos', async (req, res) => {
    try {
        const todos = await todoService.findAll()
        res.status(200).json(todos)
    }
    catch (err) {
        res.status(400).json(err)
    }
})

//start server 
app.listen(3000, () => {
    console.log('Express app is running!')
})
.....................................................................................
			 How to modularize the express app
.....................................................................................


						    |-----Customers
						    |-----Users
User - /api/customers/-------|Express Server|App-----
						    |-----Products
						    |-----XXX

src
  |
  index.js - root app
routers
  |
  ----customerrouter.js
services
  ----customerService.js


Router:
  A router object is isloated instance of middlewares and routes.
  You can think of it as a "mini application"...

................................................................................
const express = require('express')
const userRouter = require('./routers/user.router')
const todoRouter = require('./routers/todo.router')
//create application object 
const app = express()

//mount the userRouter with app .
app.use('/api/users', userRouter)
app.use('/api/todos',todoRouter)

//home page
app.get('/', (req, res) => {
    res.end('Home')
})


//start server 
app.listen(3000, () => {
    console.log('Express app is running!')
})
...................................................................................
				Middlewares
..................................................................................
Middlewares:
 What is Middleware?
  Middleware is javascript function that have access request object and response and next function in the application request response cycle.
  
 The difference between normal function which handles req and response with express , express takes thrird arg


Why Middlewares:
  -Middlewares does not lot pre processing.

.....................................................................................
				Types of Middlewares
.....................................................................................
1.Application middleware
2.Router level middlware  - custom middlwares
3.Error handling middleware - global exception handler
4.Third party middleware 
   -must be installed through npm

const express = require('express')
const usersService = require('../services/users.service')

//create router object 
const userRouter = express.Router()

//Request handling: HTTP method GET  With URL 
// GET http://localhost:3000/api/users
userRouter.get('/', async (req, res) => {
    try {
        const users = await usersService.findAll()
        res.status(200).json(users)
    }
    catch (err) {
        res.status(400).json(err)
    }
})
// GET http://localhost:3000/api/users/1
userRouter.get('/:id', async (req, res) => {
    const params = req.params
    try {
        const users = await usersService.findById(params.id)
        res.status(200).json(users)
    }
    catch (err) {
        res.status(400).json(err)
    }
})
//post 
userRouter.post('/', async (req, res) => {
  
    try {
        const user = req.body
        console.log(user)
        const users = await usersService.save(user)
        res.status(200).json(users)
    }
    catch (err) {
        res.status(400).json(err)
    }
})


module.exports = userRouter
const express = require('express')
const bodyParser = require('body-parser')

const userRouter = require('./routers/user.router')
const todoRouter = require('./routers/todo.router')
//create application object 

const app = express()
//register middleware
app.use(bodyParser.json())

//mount the userRouter with app .
app.use('/api/users', userRouter)
app.use('/api/todos',todoRouter)


//home page
app.get('/', (req, res) => {
    res.end('Home')
})


//start server 
app.listen(3000, () => {
    console.log('Express app is running!')
})



